<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="C:/Users/Lu_ki/OneDrive - Northeastern University/NU Master Courseworks/ITC6000/Course Materials/Module 3/2_Assignments/Supporting Material/Database_M3_EdX.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="250"/><column_width id="3" width="6668"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><current_table name="4,12:maincourse_users"/><default_encoding codec=""/><browse_table_settings><table schema="main" name="Course" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="184"/><column index="2" value="86"/><column index="3" value="121"/><column index="4" value="103"/><column index="5" value="144"/><column index="6" value="300"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="EdX_Enrollment_Data_10pct 2" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="300"/><column index="2" value="283"/><column index="3" value="300"/><column index="4" value="270"/><column index="5" value="152"/><column index="6" value="115"/><column index="7" value="131"/><column index="8" value="124"/><column index="9" value="300"/><column index="10" value="300"/><column index="11" value="136"/><column index="12" value="136"/><column index="13" value="136"/><column index="14" value="136"/><column index="15" value="136"/><column index="16" value="152"/><column index="17" value="179"/><column index="18" value="148"/><column index="19" value="207"/><column index="20" value="136"/><column index="21" value="237"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="course_users" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_"><sort/><column_widths><column index="1" value="177"/><column index="2" value="109"/><column index="3" value="101"/><column index="4" value="101"/><column index="5" value="101"/><column index="6" value="101"/><column index="7" value="101"/><column index="8" value="101"/><column index="9" value="101"/><column index="10" value="101"/><column index="11" value="101"/><column index="12" value="110"/><column index="13" value="101"/><column index="14" value="122"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1"> the same name as the one we are about to create

CREATE TABLE RECORDS (
    `course_id` VARCHAR(300) DEFAULT NULL,
    `Course_Short_Title` VARCHAR(300) DEFAULT NULL,
    `Course_Long_Title` VARCHAR(300) DEFAULT NULL,
    `userid_DI` VARCHAR(300) DEFAULT NULL,
    `registered` INT(1) DEFAULT NULL,
    `viewed` INT(1) DEFAULT NULL,
    `explored` INT(1) DEFAULT NULL,
    `certified` INT(1) DEFAULT NULL,
    `Country` VARCHAR(300) DEFAULT NULL,
    `LoE_DI` VARCHAR(300) DEFAULT NULL,
    `YoB` INT(4) DEFAULT NULL,
    `Age` INT(3) DEFAULT NULL,
    `gender` VARCHAR(5) DEFAULT NULL,
    `grade` DOUBLE DEFAULT NULL,
    `nevents` INT(4) DEFAULT NULL,
    `ndays_act` INT(4) DEFAULT NULL,
    `nplay_video` VARCHAR(300) DEFAULT NULL,
    `nchapters` INT(4) DEFAULT NULL,
    `nforum_posts` INT(5) DEFAULT NULL,
    `roles` VARCHAR(300) DEFAULT NULL,
    `incomplete_flag` INT(5) DEFAULT NULL
);





SELECT 
    *
FROM
    records;

SELECT 
    COUNT(*)
FROM
    records;
    
# Step6
# Now let us create three new columns (use the ALTER command to add new columns in the table)
# Note: 'Alter' keyword can only be used to update an existing table
# Note: 'Alter' keyword can only be used to update the Structure of the table

ALTER TABLE RECORDS
ADD COLUMN institution TEXT;

ALTER TABLE RECORDS
ADD COLUMN course_number VARCHAR (50);

ALTER TABLE RECORDS
ADD COLUMN course_term VARCHAR (50);

SELECT 
    *
FROM
    RECORDS
LIMIT 1;

SELECT 
    course_id,
    SUBSTR(`course_id`, '/', 1) AS institution
FROM
    RECORDS;
    
SELECT 
    course_id,
    SUBSTR(SUBSTR(`course_id`, '/', 2),
            '/',
            - 1) AS course_number
FROM
    RECORDS;
    
SELECT 
    course_id,
    SUBSTR(SUBSTR(SUBSTR(`course_id`, '/', 3),
                    '/',
                    - 1),
            '/',
            - 2) AS course_term
FROM
    RECORDS;


# Step7
# Without a primary key in the tables, the settings need to be updated to allow the changes:


UPDATE RECORDS 
SET 
    institution = SUBSTR(`course_id`, '/', 1),
    course_number = SUBSTR(SUBSTR(`course_id`, '/', 2),
            '/',
            - 1),
    course_term = SUBSTR(SUBSTR(SUBSTR(`course_id`, '/', 3),
                    '/',
                    - 1),
            '/',
            - 2);


SELECT 
    *
FROM
    RECORDS
LIMIT 1000;

SELECT DISTINCT
    institution, course_number, course_term
FROM
    RECORDS;

SELECT DISTINCT
    country
FROM
    RECORDS
ORDER BY country;

SELECT DISTINCT
    country, userid_DI
FROM
    RECORDS
WHERE
    LoE_DI = 'Doctorate';

SELECT DISTINCT
    Course_Long_Title
FROM
    RECORDS;

SELECT 
    COUNT(*)
FROM
    RECORDS
WHERE
    country = 'Germany';

CREATE TABLE Course AS SELECT DISTINCT Course_id,
    Institution,
    Course_number,
    Course_term,
    Course_Short_Title,
    Course_Long_Title FROM
    RECORDS;
    
SELECT 
    *
FROM
    course;
-- note, can redefine variable types in create command as shown here:
-- CREATE TABLE edx.Course (
--     `Course_id` VARCHAR(300) NOT NULL,
--     `Institution` VARCHAR(300) DEFAULT NULL,
--     `Course_number` VARCHAR(300) DEFAULT NULL,
--     `Course_term` VARCHAR(300) DEFAULT NULL,
--     `Course_Short_Title` VARCHAR(300) DEFAULT NULL,
--     `Course_Long_Title` VARCHAR(300) DEFAULT NULL
--      )     SELECT DISTINCT Course_id,
--     Institution,
--     Course_number,
--     Course_term,
--     Course_Short_Title,
--     Course_Long_Title FROM
--     edx.RECORDS;

CREATE TABLE Users AS 
	SELECT distinct userid_DI,
    Country,
    LoE_DI,
    YoB,
    Age,
    Gender FROM
    records
GROUP BY userid_DI;
    


-- Alternate approach:


SELECT 
    *
FROM
    users;

CREATE TABLE course_users AS SELECT `course_id`,  
    `userid_DI`,
    `registered`,
    `viewed`,
    `explored`,
    `certified`,
    `grade`,
    `nevents`,
    `ndays_act`,
    `nplay_video`,
    `nchapters`,
    `nforum_posts`,
    `roles`,
    `incomplete_flag` FROM
    RECORDS;
    
# Step 13
# Now that you have loaded data in your tables
# lets go ahead and maked the keys in the tables
# we are going to make a primary key and a foreign key in the tables
# primary keys are those keys that identify each row in that particular table uniquely and cannot be NULL
# primary keys need to be unique and they cannot contain duplicate values
# foreign keys are those keys that are referenced from the primary keys
# use the 'ALTER' keyword to alter the structure of the existing table
#

# WILL NOT WORK FOR SQLLITE

ALTER TABLE Course
ADD PRIMARY KEY (Course_id);

ALTER TABLE Users
ADD PRIMARY KEY (userid_DI);

ALTER TABLE ecourse_users 
ADD CONSTRAINT fk_course_id -- names the constraint
  FOREIGN KEY (course_id)
  REFERENCES course (Course_id),
ADD CONSTRAINT fk_userid_DI
  FOREIGN KEY (userid_DI)
  REFERENCES users (userid_DI);


  
  
 
# Part 1

SELECT course_id, count (*)
FROM RECORDS
WHERE course_id = 'MITx/6.00x/2012_Fall'
AND registered = 1;

SELECT course_id, count (*)
FROM RECORDS
WHERE course_id = 'MITx/6.00x/2013_Spring'
AND registered = 1;

SELECT course_id, avg(grade)
FROM RECORDS
WHERE course_id = 'MITx/6.00x/2012_Fall'
AND registered = 1;

SELECT course_id, avg(grade)
FROM RECORDS
WHERE course_id = 'MITx/6.00x/2013_Spring'
AND registered = 1;

SELECT course_id, avg(grade)
FROM RECORDS
WHERE course_id = 'MITx/6.00x/2012_Fall'
AND registered = 1
AND NOT grade = 0;

SELECT course_id, avg(grade)
FROM RECORDS
WHERE course_id = 'MITx/6.00x/2013_Spring'
AND registered = 1
AND NOT grade = 0;

SELECT count (*)
FROM RECORDS
WHERE course_id = 'MITx/6.00x/2012_Fall' 
OR course_id = 'MITx/6.00x/2013_Spring';

SELECT count (*)
FROM RECORDS
WHERE course_id = 'MITx/6.00x/2012_Fall' OR course_id = 'MITx/6.00x/2013_Spring'
AND registered = 1;

SELECT count (*)
FROM RECORDS
WHERE course_id = 'MITx/6.00x/2 012_Fall' OR course_id = 'MITx/6.00x/2013_Spring'


# Part 2

SELECT DISTINCT(course_id), Count (*)
FROM RECORDS
GROUP BY course_id;

SELECT DISTINCT(course_id), Count (*) as enrollees
FROM RECORDS
GROUP BY course_id;

SELECT DISTINCT(course_id), Count (*) as enrollees
FROM RECORDS
GROUP BY course_id
ORDER BY enrollees DESC;

# Part 3

SELECT DISTINCT(Course_Long_Title), Count (*) as enrollees
FROM RECORDS
GROUP BY Course_Long_Title
ORDER BY enrollees DESC;

SELECT course_id, Count(*) as enrollees
FROM RECORDS
GROUP BY course_id
HAVING enrollees &gt; 4000;

# Part 4

SELECT course_id, sum(registered) as registered, sum(viewed) as viewed,
	sum(explored) as explored, sum(certified) as certified
FROM course_users
GROUP BY course_id;


SELECT Course_Long_Title, sum(registered) as registered, sum(viewed) as viewed,
	sum(explored) as explored, sum(certified) as certified
FROM (
course_users
INNER JOIN Course
ON (course_users.course_id = Course.course_id)
)
GROUP BY Course_Long_Title;


WITH sub_q as (
SELECT course_id, sum(registered) as registered, sum(viewed) as viewed,
	sum(explored) as explored, sum(certified) as certified
FROM course_users
GROUP BY course_id)
SELECT course_id, registered, viewed,
	round(CAST(viewed AS FLOAT)/CAST(registered AS FLOAT), 2) as view_frac,
	explored, 
	round(CAST(explored AS FLOAT)/CAST(registered AS FLOAT), 2) as exp_frac,
	certified,
	round(CAST(certified AS FLOAT)/CAST(registered AS FLOAT), 2) as cert_frac
FROM sub_q;


WITH sub_q as (
SELECT Course_Long_Title, sum(registered) as registered, sum(viewed) as viewed,
	sum(explored) as explored, sum(certified) as certified
FROM (
course_users
INNER JOIN Course
ON (course_users.course_id = Course.course_id)
)
GROUP BY Course_Long_Title)
SELECT Course_Long_Title, registered, viewed,
	round(CAST(viewed AS FLOAT)/CAST(registered AS FLOAT), 2) as view_frac,
	explored, 
	round(CAST(explored AS FLOAT)/CAST(registered AS FLOAT), 2) as exp_frac,
	certified,
	round(CAST(certified AS FLOAT)/CAST(registered AS FLOAT), 2) as cert_frac
FROM sub_q;


# Part 5


SELECT *, Count(*) as enrollees
FROM(
SELECT *
FROM(
SELECT Course.course_id, Course.Course_Long_Title
FROM Course
JOIN course_users
ON Course.course_id = course_users.course_id)
WHERE course_id LIKE 'Harvard%')
GROUP BY course_id
HAVING enrollees &gt; 4000

SELECT count(*)
FROM(
SELECT *, count(*) as course_enrolled
FROM(
SELECT Course.course_id, Course_users.userid_DI
FROM Course
JOIN course_users
ON Course.course_id = course_users.course_id)
GROUP BY userid_DI
HAVING course_enrolled &gt; 3);

SELECT Country, Count (*) as user_num
FROM Users
GROUP BY Country
ORDER BY Country ASC;

SELECT Country, count (*) as certificated_user, round(avg (grade),3) as avg_grade
FROM(
SELECT Users.Country, Users.userid_DI, course_users.registered, course_users.grade
FROM Users
JOIN course_users
ON Users.userid_DI = course_users.userid_DI
WHERE certified = 1
)
GROUP BY Country
ORDER BY avg_grade DESC
LIMIT 1;


SELECT Country, count (*) as certificated_user, round(avg (grade),3) as avg_grade
FROM(
SELECT Users.Country, Users.userid_DI, course_users.registered, course_users.grade
FROM Users
JOIN course_users
ON Users.userid_DI = course_users.userid_DI
WHERE certified = 1
)
GROUP BY Country
ORDER BY avg_grade ASC
LIMIT 1;


# Part 6

SELECT Country, count (*) as certificated_user, round(avg (grade),3) as avg_grade
FROM(
SELECT Users.Country, Users.userid_DI, course_users.certified, course_users.grade,
	Course.course_id
FROM Users
JOIN course_users
ON Users.userid_DI = course_users.userid_DI
JOIN Course
ON course_users.course_id = Course.course_id
WHERE certified = 1
AND Course.course_id like 'Harvard%')
GROUP BY Country
ORDER BY avg_grade DESC; 
 
 
SELECT Country, count (*) as certificated_user, round(avg (grade),3) as avg_grade
FROM(
SELECT Users.Country, Users.userid_DI, course_users.certified, course_users.grade,
	Course.course_id
FROM Course
LEFT JOIN course_users
ON (Course.course_id = course_users.course_id) 
LEFT JOIN Users
ON (course_users.userid_DI = Users.userid_DI)
WHERE certified = 1
AND course_users.course_id like 'Harvard%')
GROUP BY Country
ORDER BY avg_grade DESC
LIMIT 1; 


SELECT Country, count (*) as certificated_user, round(avg (grade),3) as avg_grade
FROM(
SELECT Users.Country, Users.userid_DI, course_users.certified, course_users.grade,
	Course.course_id
FROM Course
LEFT JOIN course_users
ON (Course.course_id = course_users.course_id) 
LEFT JOIN Users
ON (course_users.userid_DI = Users.userid_DI)
WHERE certified = 1
AND course_users.course_id like 'Harvard%')
GROUP BY Country
ORDER BY avg_grade ASC
LIMIT 1; 


SELECT Country, count (*) as certificated_user, round(avg (grade),3) as avg_grade
FROM(
SELECT Users.Country, Users.userid_DI, course_users.certified, course_users.grade,
	Course.course_id
FROM Users
JOIN course_users
ON Users.userid_DI = course_users.userid_DI
JOIN Course
ON course_users.course_id = Course.course_id
WHERE certified = 1
AND Course.course_id like 'MIT%')
GROUP BY Country
ORDER BY avg_grade DESC; 
  
SELECT Country, count (*) as certificated_user, round(avg (grade),3) as avg_grade
FROM(
SELECT Users.Country, Users.userid_DI, course_users.certified, course_users.grade,
	Course.course_id
FROM Course
LEFT JOIN course_users
ON (Course.course_id = course_users.course_id) 
LEFT JOIN Users
ON (course_users.userid_DI = Users.userid_DI)
WHERE certified = 1
AND course_users.course_id like 'MIT%')
GROUP BY Country
ORDER BY avg_grade DESC
LIMIT 1; 


SELECT Country, count (*) as certificated_user, round(avg (grade),3) as avg_grade
FROM(
SELECT Users.Country, Users.userid_DI, course_users.certified, course_users.grade,
	Course.course_id
FROM Course
LEFT JOIN course_users
ON (Course.course_id = course_users.course_id) 
LEFT JOIN Users
ON (course_users.userid_DI = Users.userid_DI)
WHERE certified = 1
AND course_users.course_id like 'MIT%')
GROUP BY Country
ORDER BY avg_grade ASC
LIMIT 1;  
 
 
 
 
 

 

 

</sql><current_tab id="0"/></tab_sql></sqlb_project>
